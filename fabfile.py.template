from os import environ

from fabric.api import *
from fabric.context_managers import cd
from fabric.contrib.files import sed

# root user password on new machine before it is locked down
# all IP address or hostnames of the servers you want to put your SSH keys
# and authorized_host files on, ex: 127.0.0.1
env.hosts = ['root@123.57.64.113']
#env.hosts = ['root@115.159.88.135']
env.password = ""
#env.key_filename = "/Users/silegon/.ssh/private_keys/ansible_qcloud_rsa"
# your full name for the new non-root user
env.new_user_full_name = 'silegon create' # ex: Matt Makai
# local filesystem directory where your id_rsa, id_rsa.pub, and
# authorized_keys2 files are located (they will be scp'd to target hosts)
# you probably want to create a new deployment pub/private keypair for this
env.ssh_key_dir = '~/.ssh/private_keys/' # ex: '~/devel/py/deploy-django/ssh_conf/'
env.ssh_key_filename = "ansible_qcloud_rsa"

# you shouldn't need to change the below variables

# run the bootstrap process as root before it is locked down
env.user = 'root'
# username for the new non-root user to be created
env.new_user = 'bl_deploy' # ex: deployer
# group name for the new non-root user to be created
env.new_user_grp = 'bl_deploy' # ex: mygroup

def bootstrap_ansible():
    local('ssh-keygen -R %s' % env.host_string)
    sed('/etc/ssh/sshd_config', '^UsePAM yes', 'UsePAM no')
    sed('/etc/ssh/sshd_config', '^#PasswordAuthentication yes',
        'PasswordAuthentication no')
    sed('/etc/ssh/sshd_config', '^HostbasedAuthentication no',
        'HostbasedAuthentication yes')
    _create_privileged_group()
    _create_privileged_user()
    _upload_keys(env.new_user)
    run('service ssh reload')

def _create_privileged_group():
    run('/usr/sbin/groupadd ' + env.new_user_grp)
    run('mv /etc/sudoers /etc/sudoers-backup')
    run('(cat /etc/sudoers-backup ; echo "%' + env.new_user_grp + \
        ' ALL=(ALL) NOPASSWD:ALL") > /etc/sudoers')
    run('chmod 440 /etc/sudoers')

def _create_privileged_user():
    run('/usr/sbin/useradd -c "%s" -m -g %s %s' % \
        (env.new_user_full_name, env.new_user_grp, env.new_user))
    run('/usr/bin/passwd %s' % env.new_user)
    run('/usr/sbin/usermod -a -G ' + env.new_user_grp + ' ' + \
        env.new_user)
    run('mkdir /home/%s/.ssh' % env.new_user)
    run('chown -R %s /home/%s/.ssh' % (env.new_user, env.new_user))
    run('chgrp -R %s /home/%s/.ssh' % (env.new_user_grp,
        env.new_user))

def _upload_keys(username):
    put(env.ssh_key_dir + env.ssh_key_filename + '.pub', "/home/" + env.new_user + "/.ssh")
    run("cat /home/%s/.ssh/%s.pub > /home/%s/.ssh/authorized_keys" % (env.new_user, env.ssh_key_filename, env.new_user))

